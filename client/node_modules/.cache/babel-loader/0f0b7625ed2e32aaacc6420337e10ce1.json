{"ast":null,"code":"var _jsxFileName = \"/Users/marshall/Projects/DragDraft2022/DragDraft2022/client/src/components/Admin.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Admin = () => {\n  _s();\n\n  const [queens, setQueens] = useState([]);\n  const [formState, setFormState] = useState({\n    week: 1,\n    maxiWinners: [],\n    miniWinners: [],\n    lsWinners: [],\n    elims: [],\n    topThree: [],\n    winner: []\n  });\n\n  const handleNumChange = _ref => {\n    let {\n      target\n    } = _ref;\n    const value = target.value;\n    const name = target.name;\n    setFormState(values => ({ ...values,\n      [name]: value\n    }));\n  };\n\n  const handleCheckChange = (name, idx) => {\n    let newFormState = structuredClone(formState);\n    newFormState[name][idx] = !newFormState[name][idx];\n    setFormState(newFormState);\n  };\n\n  const handleSubmit = e => {\n    console.log(formState);\n  };\n\n  useEffect(() => {\n    fetch('http://localhost:9000/api/queens', {\n      method: 'GET'\n    }).then(res => res.json().then(queensList => {\n      setQueens(queensList);\n      setFormState({\n        week: 1,\n        maxiWinners: new Array(queensList.length).fill(false),\n        miniWinners: new Array(queensList.length).fill(false),\n        lsWinners: new Array(queensList.length).fill(false),\n        elims: new Array(queensList.length).fill(false),\n        topThree: new Array(queensList.length).fill(false),\n        winner: new Array(queensList.length).fill(false)\n      });\n    })).catch(err => console.log(err));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Week:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: formState.week,\n          id: \"week\",\n          name: \"week\",\n          min: \"1\",\n          max: \"14\",\n          onChange: handleNumChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"hline\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Maxi Winner(s):\", queens ? queens.map((queen, idx) => {\n          return /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\" \", queen.queen_name, /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              id: idx,\n              name: \"maxiWinners\",\n              value: queen.queen_name,\n              checked: formState.maxiWinners[idx],\n              onChange: () => handleCheckChange(\"maxiWinners\", idx)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 33\n            }, this)]\n          }, queen.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 29\n          }, this);\n        }) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Admin, \"jLvEWCJ2B3E96jKIwa1IRj88SpE=\");\n\n_c = Admin;\nexport default Admin;\n\nvar _c;\n\n$RefreshReg$(_c, \"Admin\");","map":{"version":3,"sources":["/Users/marshall/Projects/DragDraft2022/DragDraft2022/client/src/components/Admin.jsx"],"names":["React","useEffect","useState","Admin","queens","setQueens","formState","setFormState","week","maxiWinners","miniWinners","lsWinners","elims","topThree","winner","handleNumChange","target","value","name","values","handleCheckChange","idx","newFormState","structuredClone","handleSubmit","e","console","log","fetch","method","then","res","json","queensList","Array","length","fill","catch","err","map","queen","queen_name","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBH,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC;AACvCM,IAAAA,IAAI,EAAE,CADiC;AAEvCC,IAAAA,WAAW,EAAE,EAF0B;AAGvCC,IAAAA,WAAW,EAAE,EAH0B;AAIvCC,IAAAA,SAAS,EAAE,EAJ4B;AAKvCC,IAAAA,KAAK,EAAE,EALgC;AAMvCC,IAAAA,QAAQ,EAAE,EAN6B;AAOvCC,IAAAA,MAAM,EAAE;AAP+B,GAAD,CAA1C;;AAUA,QAAMC,eAAe,GAAG,QAAgB;AAAA,QAAf;AAAEC,MAAAA;AAAF,KAAe;AACpC,UAAMC,KAAK,GAAGD,MAAM,CAACC,KAArB;AACA,UAAMC,IAAI,GAAGF,MAAM,CAACE,IAApB;AACAX,IAAAA,YAAY,CAACY,MAAM,KAAK,EAAC,GAAGA,MAAJ;AAAY,OAACD,IAAD,GAAQD;AAApB,KAAL,CAAP,CAAZ;AACH,GAJD;;AAMA,QAAMG,iBAAiB,GAAG,CAACF,IAAD,EAAOG,GAAP,KAAe;AACrC,QAAIC,YAAY,GAAGC,eAAe,CAACjB,SAAD,CAAlC;AACAgB,IAAAA,YAAY,CAACJ,IAAD,CAAZ,CAAmBG,GAAnB,IAA0B,CAACC,YAAY,CAACJ,IAAD,CAAZ,CAAmBG,GAAnB,CAA3B;AACAd,IAAAA,YAAY,CAACe,YAAD,CAAZ;AACH,GAJD;;AAMA,QAAME,YAAY,GAAIC,CAAD,IAAO;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAYrB,SAAZ;AACH,GAFD;;AAIAL,EAAAA,SAAS,CAAC,MAAM;AACZ2B,IAAAA,KAAK,CAAC,kCAAD,EAAqC;AACtCC,MAAAA,MAAM,EAAE;AAD8B,KAArC,CAAL,CAGCC,IAHD,CAGMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,GACRF,IADQ,CACHG,UAAU,IAAI;AAChB5B,MAAAA,SAAS,CAAC4B,UAAD,CAAT;AACA1B,MAAAA,YAAY,CAAC;AACTC,QAAAA,IAAI,EAAE,CADG;AAETC,QAAAA,WAAW,EAAE,IAAIyB,KAAJ,CAAUD,UAAU,CAACE,MAArB,EAA6BC,IAA7B,CAAkC,KAAlC,CAFJ;AAGT1B,QAAAA,WAAW,EAAE,IAAIwB,KAAJ,CAAUD,UAAU,CAACE,MAArB,EAA6BC,IAA7B,CAAkC,KAAlC,CAHJ;AAITzB,QAAAA,SAAS,EAAE,IAAIuB,KAAJ,CAAUD,UAAU,CAACE,MAArB,EAA6BC,IAA7B,CAAkC,KAAlC,CAJF;AAKTxB,QAAAA,KAAK,EAAE,IAAIsB,KAAJ,CAAUD,UAAU,CAACE,MAArB,EAA6BC,IAA7B,CAAkC,KAAlC,CALE;AAMTvB,QAAAA,QAAQ,EAAE,IAAIqB,KAAJ,CAAUD,UAAU,CAACE,MAArB,EAA6BC,IAA7B,CAAkC,KAAlC,CAND;AAOTtB,QAAAA,MAAM,EAAE,IAAIoB,KAAJ,CAAUD,UAAU,CAACE,MAArB,EAA6BC,IAA7B,CAAkC,KAAlC;AAPC,OAAD,CAAZ;AASH,KAZQ,CAHb,EAiBCC,KAjBD,CAiBOC,GAAG,IAAIZ,OAAO,CAACC,GAAR,CAAYW,GAAZ,CAjBd;AAkBH,GAnBQ,EAmBN,EAnBM,CAAT;AAqBA,sBACI;AAAA,2BACI;AAAM,MAAA,QAAQ,EAAEd,YAAhB;AAAA,8BACI;AAAA,yCACI;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,KAAK,EAAElB,SAAS,CAACE,IAAtC;AAA4C,UAAA,EAAE,EAAC,MAA/C;AAAsD,UAAA,IAAI,EAAC,MAA3D;AAAkE,UAAA,GAAG,EAAC,GAAtE;AAA0E,UAAA,GAAG,EAAC,IAA9E;AAAmF,UAAA,QAAQ,EAAEO;AAA7F;AAAA;AAAA;AAAA;AAAA,gBADJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAII;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI;AAAA,sCACKX,MAAM,GAAGA,MAAM,CAACmC,GAAP,CAAW,CAACC,KAAD,EAAQnB,GAAR,KAAe;AAChC,8BACI;AAAA,4BAAwBmB,KAAK,CAACC,UAA9B,eACI;AAAO,cAAA,IAAI,EAAC,UAAZ;AAAuB,cAAA,EAAE,EAAEpB,GAA3B;AAAgC,cAAA,IAAI,EAAC,aAArC;AAAmD,cAAA,KAAK,EAAEmB,KAAK,CAACC,UAAhE;AAA4E,cAAA,OAAO,EAAEnC,SAAS,CAACG,WAAV,CAAsBY,GAAtB,CAArF;AAAiH,cAAA,QAAQ,EAAE,MAAMD,iBAAiB,CAAC,aAAD,EAAgBC,GAAhB;AAAlJ;AAAA;AAAA;AAAA;AAAA,oBADJ;AAAA,aAAYmB,KAAK,CAACE,EAAlB;AAAA;AAAA;AAAA;AAAA,kBADJ;AAKH,SANS,CAAH,GAMF,IAPT;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,eAcI;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,KAAK,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA,cAdJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH,CArED;;GAAMvC,K;;KAAAA,K;AAuEN,eAAeA,KAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\n\nconst Admin = () => {\n    const [queens, setQueens] = useState([]);\n    const [formState, setFormState] = useState({\n        week: 1,\n        maxiWinners: [],\n        miniWinners: [],\n        lsWinners: [],\n        elims: [],\n        topThree: [],\n        winner: []\n    });\n\n    const handleNumChange = ({ target }) => {\n        const value = target.value;\n        const name = target.name;\n        setFormState(values => ({...values, [name]: value}));\n    }\n\n    const handleCheckChange = (name, idx) => {\n        let newFormState = structuredClone(formState);\n        newFormState[name][idx] = !newFormState[name][idx];\n        setFormState(newFormState);\n    }\n\n    const handleSubmit = (e) => {\n        console.log(formState);\n    }\n\n    useEffect(() => {\n        fetch('http://localhost:9000/api/queens', {\n            method: 'GET'\n        })\n        .then(res => res.json()\n            .then(queensList => {\n                setQueens(queensList);\n                setFormState({\n                    week: 1,\n                    maxiWinners: new Array(queensList.length).fill(false),\n                    miniWinners: new Array(queensList.length).fill(false),\n                    lsWinners: new Array(queensList.length).fill(false),\n                    elims: new Array(queensList.length).fill(false),\n                    topThree: new Array(queensList.length).fill(false),\n                    winner: new Array(queensList.length).fill(false)\n                });\n            })\n        )\n        .catch(err => console.log(err));\n    }, [])\n\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                <label>Week:\n                    <input type=\"number\" value={formState.week} id=\"week\" name=\"week\" min=\"1\" max=\"14\" onChange={handleNumChange}/>\n                </label>\n                <hline></hline>\n                <label>Maxi Winner(s):\n                    {queens ? queens.map((queen, idx)=> {\n                        return(\n                            <label key={queen.id}> {queen.queen_name}\n                                <input type=\"checkbox\" id={idx} name=\"maxiWinners\" value={queen.queen_name} checked={formState.maxiWinners[idx]} onChange={() => handleCheckChange(\"maxiWinners\", idx)}/>\n                            </label>\n                        )\n                    }) : null}\n                </label>\n                <input type=\"submit\" value=\"Submit\"/>\n            </form>\n        </div>\n    )\n}\n\nexport default Admin\n"]},"metadata":{},"sourceType":"module"}